/*
===========================================
Over-time Report
===========================================
purpose:
- This report consolidates key metrics of business performence over time

-------------------------------------------
•	What are the sales and orders trends over time?
•	Is there seasonality in sales during the year?
•	What is the lateness percent in orders over time?

*/
create or alter view gold.over_time_report as
----------------------------------
--calculating sales and orders over time
----------------------------------
WITH trends AS (
    SELECT 
        YEAR(approval_date) AS order_year,
        MONTH(approval_date) AS order_month,
        COUNT(DISTINCT order_key) AS orders,
        ROUND(SUM(total), 0) AS month_revenue
    FROM gold.orders
    WHERE approval_date IS NOT NULL
    GROUP BY YEAR(approval_date), MONTH(approval_date)
),
----------------------------------
--calculating total sales for each month all over the years
----------------------------------
seasonality AS (
    SELECT 
        MONTH(approval_date) AS order_month,
        ROUND(SUM(total), 0) AS all_time_month_sales
    FROM gold.orders
    WHERE approval_date IS NOT NULL
    GROUP BY MONTH(approval_date)
),
------------------------------------
--indicating each lateness of order if late
------------------------------------
lateness_per_order AS (
    SELECT
        order_key,
        YEAR(approval_date) AS order_year,
        MONTH(approval_date) AS order_month,
        MAX(CASE 
            WHEN arrival_date > estimated_arrival_date THEN 1
            ELSE 0
        END) AS times_late
    FROM gold.orders
    WHERE approval_date IS NOT NULL
    GROUP BY order_key, YEAR(approval_date), MONTH(approval_date)
),
-------------------------------------------
--counting total latenesses for each month and calculating the lateness percent
-------------------------------------------
lateness_total AS (
    SELECT
        order_year,
        order_month,
        SUM(times_late) AS times_late,
        COUNT(DISTINCT order_key) AS month_orders,
        SUM(times_late) * 1.0 / COUNT(DISTINCT order_key) AS lateness_percent
    FROM lateness_per_order
    GROUP BY order_year, order_month
),
-------------------------------------------
--calculating year kpi's such as total revenue and  average review score
-------------------------------------------
year_kpi AS (
    SELECT
        YEAR(approval_date) AS order_year,
        SUM(total) AS year_revenue,
        round(AVG(review_score*1.0),2) AS year_avg_review
    FROM gold.orders
    GROUP BY YEAR(approval_date)
)

-----------------------------------------------
--combining all the queries into one
------------------------------------------------
SELECT
    t.order_year,
    t.order_month,
    t.orders,
    t.month_revenue,
    yk.year_revenue,
    yk.year_avg_review,
    s.all_time_month_sales,
    l.times_late,
    l.lateness_percent
FROM trends t
LEFT JOIN seasonality s ON s.order_month = t.order_month
LEFT JOIN lateness_total l ON l.order_year = t.order_year AND l.order_month = t.order_month
LEFT JOIN year_kpi yk ON yk.order_year = t.order_year;
