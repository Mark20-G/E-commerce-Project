/*
========================================================
stored procedure- load silver layer
========================================================
script purpose: loading data into the 'silver' schema from 'bronze' layer tables, after data cleansing and transformations,
========================================================
*/
create or alter procedure silver.load_silver as
begin
	declare @start_time datetime, @end_time datetime, @batch_start_time datetime, @batch_end_time datetime;
 begin try
	print '====================================================================';
	print 'loading silver layer';
	print '====================================================================';

	set @batch_start_time=GETDATE();
	set @start_time=GETDATE();
	print '>>truncating table customers_dataset';
	truncate table silver.customers_dataset;
	print '>>inserting data into table customers_dataset';
	
	insert into silver.customers_dataset(
	customer_key,
	customer_id,
	customer_unique_id,
	customer_zip_code_prefix,
	customer_city,
	customer_state
	)
select
ROW_NUMBER() over(order by customer_id) as customer_key,
trim(lower(customer_id)) as customer_id, --Text Standardization
trim(lower(customer_unique_id)) as customer_unique_id,
customer_zip_code_prefix,
trim(lower(customer_city)) as customer_city,
CASE customer_state
    WHEN 'AC' THEN 'Acre'
    WHEN 'AL' THEN 'Alagoas'
    WHEN 'AM' THEN 'Amazonas'
    WHEN 'AP' THEN 'Amapá'
    WHEN 'BA' THEN 'Bahia'
    WHEN 'CE' THEN 'Ceará'
    WHEN 'DF' THEN 'Distrito Federal'
    WHEN 'ES' THEN 'Espírito Santo'
    WHEN 'GO' THEN 'Goiás'
    WHEN 'MA' THEN 'Maranhão'
    WHEN 'MG' THEN 'Minas Gerais'
    WHEN 'MS' THEN 'Mato Grosso do Sul'
    WHEN 'MT' THEN 'Mato Grosso'
    WHEN 'PA' THEN 'Pará'
    WHEN 'PB' THEN 'Paraíba'
    WHEN 'PE' THEN 'Pernambuco'
    WHEN 'PI' THEN 'Piauí'
    WHEN 'PR' THEN 'Paraná'
    WHEN 'RJ' THEN 'Rio de Janeiro'
    WHEN 'RN' THEN 'Rio Grande do Norte'
    WHEN 'RO' THEN 'Rondônia'
    WHEN 'RR' THEN 'Roraima'
    WHEN 'RS' THEN 'Rio Grande do Sul'
    WHEN 'SC' THEN 'Santa Catarina'
    WHEN 'SE' THEN 'Sergipe'
    WHEN 'SP' THEN 'São Paulo'
    WHEN 'TO' THEN 'Tocantins'
    ELSE 'Unknown'
  END AS customer_state 
from bronze.customers_dataset
	set @end_time=GETDATE();
	print 'loading duration: '+ cast(datediff(second,@start_time,@end_time) as nvarchar)+' seconds'
	print' -------------------------------------------------------------------------------'

	set @start_time=GETDATE();
	print '>>truncating table geolocation_dataset';
	truncate table silver.geolocation_dataset;
	print '>>inserting data into table geolocation_dataset';
	;with base as(
SELECT 
*,
ROW_NUMBER() over(partition by geolocation_zip_code_prefix order by geolocation_zip_code_prefix) as rank
 FROM bronze.geolocation_dataset
 )
	insert into silver.geolocation_dataset(
	geolocation_zip_code_prefix ,
	geolocation_lat ,
	geolocation_lng ,
	geolocation_city ,
	geolocation_state ,
	is_valid_location 
	)
select
geolocation_zip_code_prefix,
geolocation_lat,
geolocation_lng,
trim(lower(geolocation_city)) as geolocation_city,--Text Standardization
	CASE geolocation_state
    WHEN 'AC' THEN 'Acre'
    WHEN 'AL' THEN 'Alagoas'
    WHEN 'AM' THEN 'Amazonas'
    WHEN 'AP' THEN 'Amapá'
    WHEN 'BA' THEN 'Bahia'
    WHEN 'CE' THEN 'Ceará'
    WHEN 'DF' THEN 'Distrito Federal'
    WHEN 'ES' THEN 'Espírito Santo'
    WHEN 'GO' THEN 'Goiás'
    WHEN 'MA' THEN 'Maranhão'
    WHEN 'MG' THEN 'Minas Gerais'
    WHEN 'MS' THEN 'Mato Grosso do Sul'
    WHEN 'MT' THEN 'Mato Grosso'
    WHEN 'PA' THEN 'Pará'
    WHEN 'PB' THEN 'Paraíba'
    WHEN 'PE' THEN 'Pernambuco'
    WHEN 'PI' THEN 'Piauí'
    WHEN 'PR' THEN 'Paraná'
    WHEN 'RJ' THEN 'Rio de Janeiro'
    WHEN 'RN' THEN 'Rio Grande do Norte'
    WHEN 'RO' THEN 'Rondônia'
    WHEN 'RR' THEN 'Roraima'
    WHEN 'RS' THEN 'Rio Grande do Sul'
    WHEN 'SC' THEN 'Santa Catarina'
    WHEN 'SE' THEN 'Sergipe'
    WHEN 'SP' THEN 'São Paulo'
    WHEN 'TO' THEN 'Tocantins'
    ELSE 'Unknown'
  END AS geolocation_state,
case
when geolocation_lat is null or geolocation_lng is null then ' not valid'
else 'valid'
end as is_valid_location--creating new column to indicate if the location details are valid or not
from base
where rank=1 --to remove zip code duplicates
	set @end_time=GETDATE();
	print 'loading duration: '+ cast(datediff(second,@start_time,@end_time) as nvarchar)+' seconds'
	print' -------------------------------------------------------------------------------'

		set @start_time=GETDATE();
	print '>>truncating table order_items_dataset';
	truncate table silver.order_items_dataset;
	print '>>inserting data into table order_items_dataset';
	insert into silver.order_items_dataset(
	order_id ,
	item_amount ,
	product_id ,
	seller_id ,
	shipping_limit_date ,
	price ,
	freight 
	)
select 
trim(lower(order_id)) as order_id,--Text Standardization
order_item_id as item_amount,
trim(lower(product_id)) as product_id,
trim(lower(seller_id)) as seller_id,
cast(shipping_limit_date as date) as shipping_limit_date,--date Standardization
round(price,2) as price,--price Standardization
round(freight_value,2) as freight
from bronze.order_items_dataset
	set @end_time=GETDATE();
	print 'loading duration: '+ cast(datediff(second,@start_time,@end_time) as nvarchar)+' seconds'
	print' -------------------------------------------------------------------------------'

	set @start_time=GETDATE();
	print '>>truncating table order_payments_dataset';
	truncate table silver.order_payments_dataset;
	print '>>inserting data into table order_payments_dataset';
	;with max_sequential as(
	select 
	order_id,
	max(payment_sequential) as max_seq
	from bronze.order_payments_dataset
	group by order_id 
	)
	insert into silver.order_payments_dataset(
	order_id ,
	payment_sequential,
	payment_type ,
	payment_installments,
	payment_value ,
	is_zero_payment 
	)
select
trim(lower(op.order_id)),--Text Standardization
op.payment_sequential,
trim(lower(op.payment_type)),
case
when op.payment_installments<ms.max_seq then ms.max_seq
else op.payment_installments
end as payment_installments,--fixing logic-payment installments must be bigger than sequentials
round(payment_value,2) as payment_value,--price Standardization
CASE 
  WHEN round(payment_value,2) = 0 THEN 1 
  ELSE 0 
END AS is_zero_payment --indicate if payment ia zero for optional analysis later
from bronze.order_payments_dataset op
left join max_sequential ms on ms.order_id=op.order_id
	set @end_time=GETDATE();
	print 'loading duration: '+ cast(datediff(second,@start_time,@end_time) as nvarchar)+' seconds'
	print' -------------------------------------------------------------------------------'

	set @start_time=GETDATE();
	print '>>truncating table order_reviews_dataset';
	truncate table silver.order_reviews_dataset;
	print '>>inserting data into table order_reviews_dataset';
	insert into silver.order_reviews_dataset(
	review_id ,
	order_id ,
	review_score,
	review_comment_title ,
	review_comment_message ,
	review_create_date ,
	review_complete_time 
	)
select
review_id,
order_id,
review_score,
case
when review_comment_title is null then 'N/A'--dealing with nulls and setting default value
else review_comment_title
end as review_comment_title,
case
when review_comment_message is null then 'N/A'--dealing with nulls and setting default value
else review_comment_message
end as review_comment_message,
cast(review_creation_date as date) as review_create_date,--date Standardization
review_answer_timestamp as review_complete_time
from bronze.order_reviews_dataset

	set @end_time=GETDATE();
	print 'loading duration: '+ cast(datediff(second,@start_time,@end_time) as nvarchar)+' seconds'
	print' -------------------------------------------------------------------------------'

	set @start_time=GETDATE();
	print '>>truncating table orders_dataset';
	truncate table silver.orders_dataset;
	print '>>inserting data into table orders_dataset';
	insert into silver.orders_dataset(
	order_key,
	order_id ,
	customer_id ,
	order_status ,
	order_purchase_timestamp ,
	order_approved_at ,
	order_delivered_carrier_date ,
	order_delivered_customer_date ,
	order_estimated_delivery_date 
	)
	select
	ROW_NUMBER() over(order by order_id) as order_key,
trim(lower(order_id)) as order_id,--text Standardization
trim(lower(customer_id)) as customer_id,
trim(lower(order_status)) as order_status,
order_purchase_timestamp,
order_approved_at,
order_delivered_carrier_date,
order_delivered_customer_date,
cast(order_estimated_delivery_date as date) as order_estimated_delivery_date--date Standardization
from bronze.orders_dataset
	set @end_time=GETDATE();
	print 'loading duration: '+ cast(datediff(second,@start_time,@end_time) as nvarchar)+' seconds'
	print' -------------------------------------------------------------------------------'

	set @start_time=GETDATE();
	print '>>truncating table product_category_name_transtlation';
	truncate table silver.product_category_name_translation;
	print '>>inserting data into table product_category_name_transtlation';
	insert into silver.product_category_name_translation(
	product_category_name,
	product_category_name_english
	)
	SELECT 
trim(lower(column1)) as product_category_name,
trim(lower(column2)) as product_category_name_english
 FROM bronze.product_category_name_translation
 where column1!='product_category_name' and column2!='product_category_name_english'-- fixing bad loading
	set @end_time=GETDATE();
	print 'loading duration: '+ cast(datediff(second,@start_time,@end_time) as nvarchar)+' seconds'
	print' -------------------------------------------------------------------------------'

	set @start_time=GETDATE();
	print '>>truncating table products_dataset';
	truncate table silver.products_dataset;
	print '>>inserting data into table products_dataset';
	insert into silver.products_dataset(
	product_key,
	product_id ,
	product_category_name ,
	product_name_lenght,
	product_description_lenght ,
	product_photos_qty ,
	product_weight_g ,
	product_length_cm ,
	product_height_cm ,
	product_width_cm 
	)
SELECT 
ROW_NUMBER () over (order by product_id) as product_key,
trim(lower(product_id)) as product_id,--text Standardization
trim(lower(product_category_name)) as product_category_name,
product_name_lenght,
product_description_lenght,
product_photos_qty,
case 
when product_weight_g=0 then null
else product_weight_g
end as product_weight_g,--fixing logic-weight can't be zero
product_length_cm,
product_height_cm,
product_width_cm
  FROM bronze.products_dataset
	set @end_time=GETDATE();
	print 'loading duration: '+ cast(datediff(second,@start_time,@end_time) as nvarchar)+' seconds'
	print' -------------------------------------------------------------------------------'

	set @start_time=GETDATE();
	print '>>truncating table sellers_dataset';
	truncate table silver.sellers_dataset;
	print '>>inserting data into table sellers_dataset';
	insert into silver.sellers_dataset(
	seller_key,
	seller_id,
	seller_zip_code_prefix,
	seller_city,
	seller_state
	)
SELECT 
ROW_NUMBER() over (order by seller_id) as seller_key,
trim(lower(seller_id)) as seller_id,--text Standardization
seller_zip_code_prefix,
trim(lower(seller_city)) as seller_city,
CASE seller_state
    WHEN 'AC' THEN 'Acre'
    WHEN 'AL' THEN 'Alagoas'
    WHEN 'AM' THEN 'Amazonas'
    WHEN 'AP' THEN 'Amapá'
    WHEN 'BA' THEN 'Bahia'
    WHEN 'CE' THEN 'Ceará'
    WHEN 'DF' THEN 'Distrito Federal'
    WHEN 'ES' THEN 'Espírito Santo'
    WHEN 'GO' THEN 'Goiás'
    WHEN 'MA' THEN 'Maranhão'
    WHEN 'MG' THEN 'Minas Gerais'
    WHEN 'MS' THEN 'Mato Grosso do Sul'
    WHEN 'MT' THEN 'Mato Grosso'
    WHEN 'PA' THEN 'Pará'
    WHEN 'PB' THEN 'Paraíba'
    WHEN 'PE' THEN 'Pernambuco'
    WHEN 'PI' THEN 'Piauí'
    WHEN 'PR' THEN 'Paraná'
    WHEN 'RJ' THEN 'Rio de Janeiro'
    WHEN 'RN' THEN 'Rio Grande do Norte'
    WHEN 'RO' THEN 'Rondônia'
    WHEN 'RR' THEN 'Roraima'
    WHEN 'RS' THEN 'Rio Grande do Sul'
    WHEN 'SC' THEN 'Santa Catarina'
    WHEN 'SE' THEN 'Sergipe'
    WHEN 'SP' THEN 'São Paulo'
    WHEN 'TO' THEN 'Tocantins'
    ELSE 'Unknown'
  END AS seller_state
 FROM bronze.sellers_dataset 


	set @end_time=GETDATE();
	print 'loading duration: '+ cast(datediff(second,@start_time,@end_time) as nvarchar)+' seconds'
	print' -------------------------------------------------------------------------------'

	set @batch_end_time=GETDATE();
	print' ====================================='
	print 'batch loading duration: '+ cast(datediff(second,@batch_start_time,@batch_end_time) as nvarchar)+' seconds'
	print' ====================================='
	end try
	begin catch
	print '=========================='
	print 'error occured during silver layer loading'
	print '=========================='
	print 'error message:'+ error_message();
	print 'error num:'+ error_number();
	print 'error severity:'+ error_severity();
	end catch
end

