/*
========================================================
stored procedure- load gold layer
========================================================
script purpose: loading data into the 'gold' schema from 'silver' layer tables, merging tables, normalizing names and aggregating
========================================================
*/
create or alter procedure gold.load_gold as
begin
	declare @start_time datetime, @end_time datetime, @batch_start_time datetime, @batch_end_time datetime;
 begin try
	print '====================================================================';
	print 'loading gold layer';
	print '====================================================================';


	set @batch_start_time=GETDATE();
	set @start_time=GETDATE();
	print '>>truncating table orders';
	truncate table gold.orders;
	print '>>inserting data into table orders';
	;with base as(
	select
	o.order_key,
	o.customer_id,
	oi.seller_id,
	oi.product_id,
	oi.item_amount,
	oi.price,
	oi.item_amount*oi.price as total,
	oi.freight,
	o.order_status,
	o.order_purchase_timestamp as purchase_date,
	o.order_approved_at as approval_date,
	o.order_delivered_carrier_date as shipping_date,
	o.order_delivered_customer_date as arrival_date,
	o.order_estimated_delivery_date as estimated_arrival_date,
	cast(oi.shipping_limit_date as date) as shipping_limit_date,
	ord.review_score,
	ord.review_create_date,
	ord.review_complete_time as review_complete_date
	from silver.orders_dataset o 
	left join silver.order_reviews_dataset ord on ord.order_id=o.order_id
	left join silver.order_items_dataset oi on oi.order_id=o.order_id
)
	insert into gold.orders(
	order_key,
	customer_key,
	seller_key,
	product_key,
	item_amount,
	price,
	total,
	freight,
	order_status,
	purchase_date,
	approval_date,
	shipping_date,
	arrival_date,
	estimated_arrival_date,
	shipping_limit_date,
	review_score,
	review_create_date,
	review_complete_date 
)
select
b.order_key,
c.customer_key,
s.seller_key,
p.product_key,
b.item_amount,
b.price,
b.total,
b.freight,
b.order_status,
b.purchase_date,
b.approval_date,
b.shipping_date,
b.arrival_date,
b.estimated_arrival_date,
b.shipping_limit_date,
b.review_score,
b.review_create_date,
b.review_complete_date
from base b
left join silver.customers_dataset c on c.customer_id=b.customer_id
left join silver.sellers_dataset s on s.seller_id=b.seller_id
left join silver.products_dataset p on p.product_id=b.product_id
	set @end_time=GETDATE();
	print 'loading duration: '+ cast(datediff(second,@start_time,@end_time) as nvarchar)+' seconds'
	print' -------------------------------------------------------------------------------'

	set @start_time=GETDATE();
	print '>>truncating table product';
	truncate table gold.product;
	print '>>inserting data into table product';
	insert into gold.product(
	 product_key,
    product_category,
	product_name_length,
	product_description_length,
	product_photos_amount,
	weight,
	length,
	height,
	width,
	avg_price
	)
	SELECT
    p.product_key,
    case
	when ISNULL(pc.product_category_name_english, p.product_category_name) is null then 'N/A'
	else ISNULL(pc.product_category_name_english, p.product_category_name)
	end AS product_category,
	p.product_name_lenght as product_name_length,
	p.product_description_lenght as product_description_length,
	p.product_photos_qty as product_photos_amount,
	p.product_weight_g as weight,
	p.product_length_cm as length,
	p.product_height_cm as height,
	p.product_width_cm as width,
	round(avg(oi.price),2) as avg_price
FROM silver.products_dataset p
LEFT JOIN silver.product_category_name_translation pc ON p.product_category_name = pc.product_category_name
left join silver.order_items_dataset oi on oi.product_id=p.product_id
group by p.product_key,
	pc.product_category_name_english,
    p.product_category_name,
    p.product_name_lenght,
    p.product_description_lenght,
    p.product_photos_qty,
    p.product_weight_g,
    p.product_length_cm,
    p.product_height_cm,
    p.product_width_cm;
	set @end_time=GETDATE();
	print 'loading duration: '+ cast(datediff(second,@start_time,@end_time) as nvarchar)+' seconds'
	print' -------------------------------------------------------------------------------'

	set @start_time=GETDATE();
	print '>>truncating table customer';
	truncate table gold.customer;
	print '>>inserting data into table customer';
	insert into gold.customer(
	customer_key,
	zip_code,
	customer_city,
	customer_state
	)
select
customer_key,
customer_zip_code_prefix as zip_code,
customer_city,
customer_state
from silver.customers_dataset
	set @end_time=GETDATE();
	print 'loading duration: '+ cast(datediff(second,@start_time,@end_time) as nvarchar)+' seconds'
	print' -------------------------------------------------------------------------------'

	set @start_time=GETDATE();
	print '>>truncating table seller';
	truncate table gold.seller;
	print '>>inserting data into table seller';
	insert into gold.seller(
	seller_key,
	zip_code,
	seller_city,
	seller_state
	)
select
seller_key,
seller_zip_code_prefix as zip_code,
seller_city,
seller_state
from silver.sellers_dataset
	set @end_time=GETDATE();
	print 'loading duration: '+ cast(datediff(second,@start_time,@end_time) as nvarchar)+' seconds'
	print' -------------------------------------------------------------------------------'

	set @start_time=GETDATE();
	print '>>truncating table location';
	truncate table gold.location;
	print '>>inserting data into table location';
	insert into gold.location(
	zip_code,
	latitude,
	longitude,
	city,
	state,
	is_valid_location
	)
select
geolocation_zip_code_prefix as zip_code,
geolocation_lat as latitude,
geolocation_lng as longitude,
geolocation_city as city,
geolocation_state as state,
is_valid_location
from silver.geolocation_dataset
	set @end_time=GETDATE();
	print 'loading duration: '+ cast(datediff(second,@start_time,@end_time) as nvarchar)+' seconds'
	print' -------------------------------------------------------------------------------'

	set @start_time=GETDATE();
	print '>>truncating table transactions';
	truncate table gold.transactions;
	print '>>inserting data into table transactions';
	insert into gold.transactions(
	order_key,
	payment_sequential,
	payment_type,
	payment_installments,
	payment_value
	)
	select
o.order_key,
op.payment_sequential,
op.payment_type,
op.payment_installments,
op.payment_value
from silver.order_payments_dataset op
left join silver.orders_dataset o on o.order_id=op.order_id
set @end_time=GETDATE();
	print 'loading duration: '+ cast(datediff(second,@start_time,@end_time) as nvarchar)+' seconds'
	print' -------------------------------------------------------------------------------'

	set @batch_end_time=GETDATE();
	print' ====================================='
	print 'batch loading duration: '+ cast(datediff(second,@batch_start_time,@batch_end_time) as nvarchar)+' seconds'
	print' ====================================='
	end try
	begin catch
	print '=========================='
	print 'error occured during bronze layer loading'
	print '=========================='
	print 'error message:'+ error_message();
	print 'error num:'+ error_number();
	print 'error severity:'+ error_severity();
	end catch
end

